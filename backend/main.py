from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackContext
from dotenv import load_dotenv
import os
import logging
from telegram.constants import ParseMode

# ===== –õ–û–ì–ò =====
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• =====
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://mellstar-backend.onrender.com/webhook

if not BOT_TOKEN:
    logger.warning("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env ‚Äî Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    application = None
else:
    application = Application.builder().token(BOT_TOKEN).build()


# ===== –¢–ï–õ–ï–ì–†–ê–ú –•–≠–ù–î–õ–ï–†–´ =====
async def start(update: Update, context: CallbackContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")

    web_url = (
        f"{WEBHOOK_URL.rsplit('/', 1)[0]}/static/index.html"
        if WEBHOOK_URL else "https://mellstar-game.vercel.app"
    )

    keyboard = [[InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", web_app=WebAppInfo(url=f"{os.getenv('FRONTEND_URL')}/index.html"))]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>MellStarGameBot</b>.\n"
        "–ù–∞–∂–º–∏ <b>–ò–≥—Ä–∞—Ç—å</b>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É üöÄ",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


# ===== LIFESPAN =====
@asynccontextmanager
async def lifespan(app: FastAPI):
    if application:
        await application.initialize()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω URL (—á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ)
        if WEBHOOK_URL:
            try:
                await application.bot.set_webhook(WEBHOOK_URL)
                logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
                info = await application.bot.get_webhook_info()
                logger.info(f"Webhook info: url={info.url}, pending={info.pending_update_count}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
    yield
    if application:
        try:
            await application.bot.delete_webhook()
            await application.shutdown()
            logger.info("üîª Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


# ===== FASTAPI APP =====
app = FastAPI(lifespan=lifespan)

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ –∏ Telegram
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏–∫–∞
frontend_path = os.path.join(os.path.dirname(__file__), "frontend")
if os.path.exists(frontend_path):
    app.mount("/static", StaticFiles(directory=frontend_path, html=True), name="static")


# ===== ROUTES =====
@app.get("/")
def home():
    return {"message": "‚úÖ MellStarGameBot backend –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤!"}


@app.post("/webhook")
async def telegram_webhook(request: Request):
    if not application:
        logger.warning("‚ö†Ô∏è Webhook –≤—ã–∑–≤–∞–Ω, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ—Ç BOT_TOKEN).")
        return {"status": "no bot"}

    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω update: {data}")
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
        return {"status": "error", "message": str(e)}


# ===== –ü–†–û–°–¢–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====
@app.get("/user/{user_id}")
async def get_user(user_id: int):
    logger.info(f"GET /user/{user_id}")
    return {
        "userId": user_id,
        "slots": [{"name": "–ü—É—Å—Ç–æ", "status": "empty"} for _ in range(5)],
        "progress": 0,
        "level": 1,
        "points": 0
    }


@app.post("/user/{user_id}")
async def save_user(user_id: int, data: dict):
    logger.info(f"POST /user/{user_id}: {data}")
    return {"status": "saved"}


# ===== MAIN =====
if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ FastAPI (–±–µ–∑ webhook)")
    uvicorn.run(app, host="0.0.0.0", port=3000)
